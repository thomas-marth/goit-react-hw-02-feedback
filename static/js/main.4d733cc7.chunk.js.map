{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","components/App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Notification","message","App","state","handleClick","event","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"6PAceA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCeUC,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCcWC,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,GALIA,SCEEI,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCsD3BC,E,4MAlDbC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPe,YAAc,SAACC,GACb,IAAMP,EAAOO,EAAMC,OAAOR,KAC1B,EAAKS,UAAS,SAACJ,GAAD,mBAAC,eACVA,GADS,kBAEXL,EAAO,EAAKK,MAAML,GAAQ,Q,EAI/BU,mBAAqB,kBACnB,EAAKL,MAAMhB,KAAO,EAAKgB,MAAMf,QAAU,EAAKe,MAAMd,K,EAEpDoB,gCAAkC,kBAChC,EAAKN,MAAMhB,KACPuB,KAAKC,MAAO,EAAKR,MAAMhB,KAAO,EAAKqB,qBAAwB,KAC3D,G,4CAEN,WAAU,IAAD,EACwBI,KAAKT,MAA5BhB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAASoB,OAAOC,KAAKF,KAAKT,OAC1BT,gBAAiBkB,KAAKR,gBAGzBQ,KAAKJ,qBACJ,cAAC,EAAD,CAASxB,MAAM,aAAf,SACE,cAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOsB,KAAKJ,qBACZjB,mBAAoBqB,KAAKH,sCAI7B,cAAC,EAAD,CAAcR,QAAQ,6B,GA5Cdc,aCDlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4d733cc7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total: {total}</p>\r\n    <p>Positive feedback: {positivePercentage} %</p>\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map((option) => (\r\n      <button\r\n        key={option}\r\n        type=\"button\"\r\n        name={option}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Section from \"./Section\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Notification from \"./Notification\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    const name = event.target.name;\r\n    this.setState((state) => ({\r\n      ...state,\r\n      [name]: this.state[name] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  countPositiveFeedbackPercentage = () =>\r\n    this.state.good\r\n      ? Math.round((this.state.good / this.countTotalFeedback()) * 100)\r\n      : 0;\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={Object.keys(this.state)}\r\n            onLeaveFeedback={this.handleClick}\r\n          />\r\n        </Section>\r\n        {this.countTotalFeedback() ? (\r\n          <Section title=\"Statistics\">\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          </Section>\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}